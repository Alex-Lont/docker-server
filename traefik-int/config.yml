http:
  routers:
    proxmox:
      entryPoints:
        - "https"
      rule: "Host(`proxmox.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: proxmox
    truenas:
      entryPoints:
        - "https"
      rule: "Host(`truenas.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: truenas
    omada:
      entryPoints:
        - "https"
      rule: "Host(`omada.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: omada
    pihole:
      entryPoints:
        - "https"
      rule: "Host(`pihole.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: pihole
    pihole-backup:
      entryPoints:
        - "https"
      rule: "Host(`pihole-backup.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: pihole-backup
    qbit:
      entryPoints:
        - "https"
      rule: "Host(`qbit.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: qbit
    sonarr:
      entryPoints:
        - "https"
      rule: "Host(`sonarr.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: sonarr
    radarr:
      entryPoints:
        - "https"
      rule: "Host(`radarr.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: radarr
    jackett:
      entryPoints:
        - "https"
      rule: "Host(`jackett.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: jackett
    bazarr:
      entryPoints:
        - "https"
      rule: "Host(`bazarr.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: bazarr
    tdarr:
      entryPoints:
        - "https"
      rule: "Host(`tdarr.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: tdarr
    speed:
      entryPoints:
        - "https"
      rule: "Host(`speed.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: speed
    raklora:
      entryPoints:
        - "https"
      rule: "Host(`rak.iot.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: raklora
    milesight:
      entryPoints:
        - "https"
      rule: "Host(`milesight.iot.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: milesight
    nvr:
      entryPoints:
        - "https"
      rule: "Host(`nvr.iot.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: nvr
    notes:
      entryPoints:
        - "https"
      rule: "Host(`notes.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: notes
    tablet:
      entryPoints:
        - "https"
      rule: "Host(`tablet.iot.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: tablet
    ansible:
      entryPoints:
        - "https"
      rule: "Host(`ansible.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: ansible
    calibre:
      entryPoints:
        - "https"
      rule: "Host(`books.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: calibre
    audiobookshelf:
      entryPoints:
        - "https"
      rule: "Host(`audiobook.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: audiobookshelf
    aio:
      entryPoints:
        - "https"
      rule: "Host(`nextcloudaio.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: aio
    zigbee:
      entryPoints:
        - "https"
      rule: "Host(`zigbee.iot.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: zigbee
    dumbpad:
      entryPoints:
        - "https"
      rule: "Host(`pad.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: dumbpad
    dumbdrop:
      entryPoints:
        - "https"
      rule: "Host(`drop.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: dumbdrop
    dumbassets:
      entryPoints:
        - "https"
      rule: "Host(`assets.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: dumbassets
    dumbdo:
      entryPoints:
        - "https"
      rule: "Host(`todo.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: dumbdo
    dumbbudget:
      entryPoints:
        - "https"
      rule: "Host(`budget.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: dumbbudget
    dumbkan:
      entryPoints:
        - "https"
      rule: "Host(`kanban.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: dumbkan
    lidarr:
      entryPoints:
        - "https"
      rule: "Host(`lidarr.virtual.lontiotlabs.au`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: lidarr

  services:
    proxmox:
      loadBalancer:
        servers:
          - url: "https://10.0.14.2:8006"
        passHostHeader: true
    truenas:
      loadBalancer:
        servers:
          - url: "https://10.0.14.14"
        passHostHeader: true
    omada:
      loadBalancer:
        servers:
          - url: "https://10.0.100.2"
        passHostHeader: true
    pihole:
      loadBalancer:
        servers:
          - url: "http://192.168.7.10"
        passHostHeader: true
    pihole-backup:
      loadBalancer:
        servers:
          - url: "http://192.168.7.11"
        passHostHeader: true
    qbit:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:8080"
        passHostHeader: true
    sonarr:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:8989"
        passHostHeader: true
    radarr:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:7878"
        passHostHeader: true
    jackett:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:9117"
        passHostHeader: true
    bazarr:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:6767"
        passHostHeader: true
    tdarr:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:8265"
        passHostHeader: true
    speed:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:8765"
        passHostHeader: true
    raklora:
      loadBalancer:
        servers:
          - url: "http://192.168.10.6"
        passHostHeader: true
    milesight:
      loadBalancer:
        servers:
          - url: "https://192.168.10.7"
        passHostHeader: true
    nvr:
      loadBalancer:
        servers:
          - url: "https://192.168.10.5"
        passHostHeader: true
    notes:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:8000"
        passHostHeader: true
    tablet:
      loadBalancer:
        servers:
          - url: "http://192.168.10.3:2323"
        passHostHeader: true
    ansible:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:3000"
        passHostHeader: true
    calibre:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:8088"
        passHostHeader: true
    audiobookshelf:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:13378"
        passHostHeader: true
    aio:
      loadBalancer:
        servers:
          - url: "https://10.0.14.5:8080"
        passHostHeader: true
    zigbee:
      loadBalancer:
        servers:
          - url: "https://10.0.14.5"
        passHostHeader: true
    dumbpad:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:3001"
        passHostHeader: true
    dumbdrop:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:3002"
        passHostHeader: true
    dumbassets:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:3003"
        passHostHeader: true
    dumbdo:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:3004"
        passHostHeader: true
    dumbbudget:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:3005"
        passHostHeader: true
    dumbkan:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:3006"
        passHostHeader: true
    lidarr:
      loadBalancer:
        servers:
          - url: "http://10.0.14.4:8686"
        passHostHeader: true

  middlewares:
    https-redirectscheme:
      redirectScheme:
        scheme: https
        permanent: true

    default-headers:
      headers:
        frameDeny: true
        browserXssFilter: true
        contentTypeNosniff: true
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 15552000
        customFrameOptionsValue: SAMEORIGIN
        customRequestHeaders:
          X-Forwarded-Proto: https

    default-whitelist:
      ipWhiteList:
        sourceRange:
        - "10.0.0.0/8"
        - "192.168.0.0/16"
        - "172.16.0.0/12"

    secured:
      chain:
        middlewares:
        - default-whitelist
        - default-headers